#if !defined(_wgharp_)
#  define _wgharp_

class model_data : public ad_comm{
  data_int A;
  data_int K_act;
  data_number L_K;
  data_number U_K;
  data_int M_act;
  data_number L_M;
  data_number U_M;
  data_int M0_act;
  data_number L_M0;
  data_number U_M0;
  data_int n_pred;
  data_vector quotas;
  data_int n;
  data_matrix Ctmp;
  dvector years;
  dmatrix C;
  data_matrix Ptmp;
  dmatrix P;
  data_vector ftmp;
  dvector f;
  data_int n_est;
  data_matrix production_file;
  dmatrix pup_prod;
  data_matrix priors;
  dvector mub;
  dvector sdb;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number K;
  param_init_bounded_number M;
  param_init_bounded_number M0;
  param_vector b;
  param_vector Ntot;
  param_matrix Nout;
  param_matrix N;
  param_stddev_vector N0;
  param_stddev_vector N1;
  param_stddev_number N0_2003;
  param_stddev_number D;
  param_stddev_number Dnew;
  param_number tmp;
  param_number em;
  param_number em0;
  param_number Ft;
  param_number Ntotmax;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value l;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void write_mcchains(void);

};
#endif
